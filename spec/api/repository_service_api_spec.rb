=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for ArgoCD::RepositoryServiceApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RepositoryServiceApi' do
  before do
    # run before each test
    @instance = ArgoCD::RepositoryServiceApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RepositoryServiceApi' do
    it 'should create an instance of RepositoryServiceApi' do
      expect(@instance).to be_instance_of(ArgoCD::RepositoryServiceApi)
    end
  end

  # unit tests for repository_service_create_repository
  # CreateRepository creates a new repository configuration
  # @param body Repository definition
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :upsert Whether to create in upsert mode.
  # @option opts [BOOLEAN] :creds_only Whether to operate on credential set instead of repository.
  # @return [V1alpha1Repository]
  describe 'repository_service_create_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_delete_repository
  # DeleteRepository deletes a repository from the configuration
  # @param repo Repo URL for query
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
  # @return [RepositoryRepoResponse]
  describe 'repository_service_delete_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_get
  # Get returns a repository or its credentials
  # @param repo Repo URL for query
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
  # @return [V1alpha1Repository]
  describe 'repository_service_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_get_app_details
  # GetAppDetails returns application details by given path
  # @param source_repo_url RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [RepositoryRepoAppDetailsResponse]
  describe 'repository_service_get_app_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_get_helm_charts
  # GetHelmCharts returns list of helm charts in the specified repository
  # @param repo Repo URL for query
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
  # @return [RepositoryHelmChartsResponse]
  describe 'repository_service_get_helm_charts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_list_apps
  # ListApps returns list of apps in the repo
  # @param repo 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :revision 
  # @option opts [String] :app_name 
  # @option opts [String] :app_project 
  # @return [RepositoryRepoAppsResponse]
  describe 'repository_service_list_apps test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_list_refs
  # @param repo Repo URL for query
  # @param [Hash] opts the optional parameters
  # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
  # @return [RepositoryRefs]
  describe 'repository_service_list_refs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_list_repositories
  # ListRepositories gets a list of all configured repositories
  # @param [Hash] opts the optional parameters
  # @option opts [String] :repo Repo URL for query.
  # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
  # @return [V1alpha1RepositoryList]
  describe 'repository_service_list_repositories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_update_repository
  # UpdateRepository updates a repository configuration
  # @param repo_repo Repo contains the URL to the remote repository
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1Repository]
  describe 'repository_service_update_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for repository_service_validate_access
  # ValidateAccess validates access to a repository with given parameters
  # @param repo The URL to the repo
  # @param body The URL to the repo
  # @param [Hash] opts the optional parameters
  # @option opts [String] :username Username for accessing repo.
  # @option opts [String] :password Password for accessing repo.
  # @option opts [String] :ssh_private_key Private key data for accessing SSH repository.
  # @option opts [BOOLEAN] :insecure Whether to skip certificate or host key validation.
  # @option opts [String] :tls_client_cert_data TLS client cert data for accessing HTTPS repository.
  # @option opts [String] :tls_client_cert_key TLS client cert key for accessing HTTPS repository.
  # @option opts [String] :type The type of the repo.
  # @option opts [String] :name The name of the repo.
  # @option opts [BOOLEAN] :enable_oci Whether helm-oci support should be enabled for this repo.
  # @option opts [String] :github_app_private_key Github App Private Key PEM data.
  # @option opts [String] :github_app_id Github App ID of the app used to access the repo.
  # @option opts [String] :github_app_installation_id Github App Installation ID of the installed GitHub App.
  # @option opts [String] :github_app_enterprise_base_url Github App Enterprise base url if empty will default to https://api.github.com.
  # @option opts [String] :proxy HTTP/HTTPS proxy to access the repository.
  # @option opts [String] :project Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.
  # @option opts [String] :gcp_service_account_key Google Cloud Platform service account key.
  # @option opts [BOOLEAN] :force_http_basic_auth Whether to force HTTP basic auth.
  # @return [RepositoryRepoResponse]
  describe 'repository_service_validate_access test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
