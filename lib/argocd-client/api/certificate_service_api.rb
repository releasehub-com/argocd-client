=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class CertificateServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates repository certificates on the server
    # @param body List of certificates to be created
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert Whether to upsert already existing certificates.
    # @return [V1alpha1RepositoryCertificateList]
    def certificate_service_create_certificate(body, opts = {})
      data, _status_code, _headers = certificate_service_create_certificate_with_http_info(body, opts)
      data
    end

    # Creates repository certificates on the server
    # @param body List of certificates to be created
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert Whether to upsert already existing certificates.
    # @return [Array<(V1alpha1RepositoryCertificateList, Fixnum, Hash)>] V1alpha1RepositoryCertificateList data, response status code and response headers
    def certificate_service_create_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificateServiceApi.certificate_service_create_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CertificateServiceApi.certificate_service_create_certificate"
      end
      # resource path
      local_var_path = '/api/v1/certificates'

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1RepositoryCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificateServiceApi#certificate_service_create_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete the certificates that match the RepositoryCertificateQuery
    # @param [Hash] opts the optional parameters
    # @option opts [String] :host_name_pattern A file-glob pattern (not regular expression) the host name has to match.
    # @option opts [String] :cert_type The type of the certificate to match (ssh or https).
    # @option opts [String] :cert_sub_type The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).
    # @return [V1alpha1RepositoryCertificateList]
    def certificate_service_delete_certificate(opts = {})
      data, _status_code, _headers = certificate_service_delete_certificate_with_http_info(opts)
      data
    end

    # Delete the certificates that match the RepositoryCertificateQuery
    # @param [Hash] opts the optional parameters
    # @option opts [String] :host_name_pattern A file-glob pattern (not regular expression) the host name has to match.
    # @option opts [String] :cert_type The type of the certificate to match (ssh or https).
    # @option opts [String] :cert_sub_type The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).
    # @return [Array<(V1alpha1RepositoryCertificateList, Fixnum, Hash)>] V1alpha1RepositoryCertificateList data, response status code and response headers
    def certificate_service_delete_certificate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificateServiceApi.certificate_service_delete_certificate ...'
      end
      # resource path
      local_var_path = '/api/v1/certificates'

      # query parameters
      query_params = {}
      query_params[:'hostNamePattern'] = opts[:'host_name_pattern'] if !opts[:'host_name_pattern'].nil?
      query_params[:'certType'] = opts[:'cert_type'] if !opts[:'cert_type'].nil?
      query_params[:'certSubType'] = opts[:'cert_sub_type'] if !opts[:'cert_sub_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1RepositoryCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificateServiceApi#certificate_service_delete_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all available repository certificates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :host_name_pattern A file-glob pattern (not regular expression) the host name has to match.
    # @option opts [String] :cert_type The type of the certificate to match (ssh or https).
    # @option opts [String] :cert_sub_type The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).
    # @return [V1alpha1RepositoryCertificateList]
    def certificate_service_list_certificates(opts = {})
      data, _status_code, _headers = certificate_service_list_certificates_with_http_info(opts)
      data
    end

    # List all available repository certificates
    # @param [Hash] opts the optional parameters
    # @option opts [String] :host_name_pattern A file-glob pattern (not regular expression) the host name has to match.
    # @option opts [String] :cert_type The type of the certificate to match (ssh or https).
    # @option opts [String] :cert_sub_type The sub type of the certificate to match (protocol dependent, usually only used for ssh certs).
    # @return [Array<(V1alpha1RepositoryCertificateList, Fixnum, Hash)>] V1alpha1RepositoryCertificateList data, response status code and response headers
    def certificate_service_list_certificates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CertificateServiceApi.certificate_service_list_certificates ...'
      end
      # resource path
      local_var_path = '/api/v1/certificates'

      # query parameters
      query_params = {}
      query_params[:'hostNamePattern'] = opts[:'host_name_pattern'] if !opts[:'host_name_pattern'].nil?
      query_params[:'certType'] = opts[:'cert_type'] if !opts[:'cert_type'].nil?
      query_params[:'certSubType'] = opts[:'cert_sub_type'] if !opts[:'cert_sub_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1RepositoryCertificateList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CertificateServiceApi#certificate_service_list_certificates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
