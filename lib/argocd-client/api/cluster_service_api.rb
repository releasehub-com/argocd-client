=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class ClusterServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create creates a cluster
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @return [V1alpha1Cluster]
    def cluster_service_create(body, opts = {})
      data, _status_code, _headers = cluster_service_create_with_http_info(body, opts)
      data
    end

    # Create creates a cluster
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @return [Array<(V1alpha1Cluster, Fixnum, Hash)>] V1alpha1Cluster data, response status code and response headers
    def cluster_service_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClusterServiceApi.cluster_service_create"
      end
      # resource path
      local_var_path = '/api/v1/clusters'

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete deletes a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [ClusterClusterResponse]
    def cluster_service_delete(id_value, opts = {})
      data, _status_code, _headers = cluster_service_delete_with_http_info(id_value, opts)
      data
    end

    # Delete deletes a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [Array<(ClusterClusterResponse, Fixnum, Hash)>] ClusterClusterResponse data, response status code and response headers
    def cluster_service_delete_with_http_info(id_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_delete ...'
      end
      # verify the required parameter 'id_value' is set
      if @api_client.config.client_side_validation && id_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_value' when calling ClusterServiceApi.cluster_service_delete"
      end
      # resource path
      local_var_path = '/api/v1/clusters/{id.value}'.sub('{' + 'id.value' + '}', id_value.to_s)

      # query parameters
      query_params = {}
      query_params[:'server'] = opts[:'server'] if !opts[:'server'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'id.type'] = opts[:'id_type'] if !opts[:'id_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterClusterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns a cluster by server address
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [V1alpha1Cluster]
    def cluster_service_get(id_value, opts = {})
      data, _status_code, _headers = cluster_service_get_with_http_info(id_value, opts)
      data
    end

    # Get returns a cluster by server address
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [Array<(V1alpha1Cluster, Fixnum, Hash)>] V1alpha1Cluster data, response status code and response headers
    def cluster_service_get_with_http_info(id_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_get ...'
      end
      # verify the required parameter 'id_value' is set
      if @api_client.config.client_side_validation && id_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_value' when calling ClusterServiceApi.cluster_service_get"
      end
      # resource path
      local_var_path = '/api/v1/clusters/{id.value}'.sub('{' + 'id.value' + '}', id_value.to_s)

      # query parameters
      query_params = {}
      query_params[:'server'] = opts[:'server'] if !opts[:'server'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'id.type'] = opts[:'id_type'] if !opts[:'id_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # InvalidateCache invalidates cluster cache
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1Cluster]
    def cluster_service_invalidate_cache(id_value, opts = {})
      data, _status_code, _headers = cluster_service_invalidate_cache_with_http_info(id_value, opts)
      data
    end

    # InvalidateCache invalidates cluster cache
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1Cluster, Fixnum, Hash)>] V1alpha1Cluster data, response status code and response headers
    def cluster_service_invalidate_cache_with_http_info(id_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_invalidate_cache ...'
      end
      # verify the required parameter 'id_value' is set
      if @api_client.config.client_side_validation && id_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_value' when calling ClusterServiceApi.cluster_service_invalidate_cache"
      end
      # resource path
      local_var_path = '/api/v1/clusters/{id.value}/invalidate-cache'.sub('{' + 'id.value' + '}', id_value.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_invalidate_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List returns list of clusters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @option opts [String] :id_value value holds the cluster server URL or cluster name.
    # @return [V1alpha1ClusterList]
    def cluster_service_list(opts = {})
      data, _status_code, _headers = cluster_service_list_with_http_info(opts)
      data
    end

    # List returns list of clusters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :server 
    # @option opts [String] :name 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @option opts [String] :id_value value holds the cluster server URL or cluster name.
    # @return [Array<(V1alpha1ClusterList, Fixnum, Hash)>] V1alpha1ClusterList data, response status code and response headers
    def cluster_service_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_list ...'
      end
      # resource path
      local_var_path = '/api/v1/clusters'

      # query parameters
      query_params = {}
      query_params[:'server'] = opts[:'server'] if !opts[:'server'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'id.type'] = opts[:'id_type'] if !opts[:'id_type'].nil?
      query_params[:'id.value'] = opts[:'id_value'] if !opts[:'id_value'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ClusterList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # RotateAuth rotates the bearer token used for a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @return [ClusterClusterResponse]
    def cluster_service_rotate_auth(id_value, opts = {})
      data, _status_code, _headers = cluster_service_rotate_auth_with_http_info(id_value, opts)
      data
    end

    # RotateAuth rotates the bearer token used for a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClusterClusterResponse, Fixnum, Hash)>] ClusterClusterResponse data, response status code and response headers
    def cluster_service_rotate_auth_with_http_info(id_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_rotate_auth ...'
      end
      # verify the required parameter 'id_value' is set
      if @api_client.config.client_side_validation && id_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_value' when calling ClusterServiceApi.cluster_service_rotate_auth"
      end
      # resource path
      local_var_path = '/api/v1/clusters/{id.value}/rotate-auth'.sub('{' + 'id.value' + '}', id_value.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ClusterClusterResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_rotate_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update updates a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :updated_fields 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [V1alpha1Cluster]
    def cluster_service_update(id_value, body, opts = {})
      data, _status_code, _headers = cluster_service_update_with_http_info(id_value, body, opts)
      data
    end

    # Update updates a cluster
    # @param id_value value holds the cluster server URL or cluster name
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :updated_fields 
    # @option opts [String] :id_type type is the type of the specified cluster identifier ( \&quot;server\&quot; - default, \&quot;name\&quot; ).
    # @return [Array<(V1alpha1Cluster, Fixnum, Hash)>] V1alpha1Cluster data, response status code and response headers
    def cluster_service_update_with_http_info(id_value, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClusterServiceApi.cluster_service_update ...'
      end
      # verify the required parameter 'id_value' is set
      if @api_client.config.client_side_validation && id_value.nil?
        fail ArgumentError, "Missing the required parameter 'id_value' when calling ClusterServiceApi.cluster_service_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ClusterServiceApi.cluster_service_update"
      end
      # resource path
      local_var_path = '/api/v1/clusters/{id.value}'.sub('{' + 'id.value' + '}', id_value.to_s)

      # query parameters
      query_params = {}
      query_params[:'updatedFields'] = @api_client.build_collection_param(opts[:'updated_fields'], :multi) if !opts[:'updated_fields'].nil?
      query_params[:'id.type'] = opts[:'id_type'] if !opts[:'id_type'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Cluster')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClusterServiceApi#cluster_service_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
