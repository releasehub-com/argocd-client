=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class ProjectServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new project
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1AppProject]
    def project_service_create(body, opts = {})
      data, _status_code, _headers = project_service_create_with_http_info(body, opts)
      data
    end

    # Create a new project
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1AppProject, Fixnum, Hash)>] V1alpha1AppProject data, response status code and response headers
    def project_service_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectServiceApi.project_service_create"
      end
      # resource path
      local_var_path = '/api/v1/projects'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1AppProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new project token
    # @param project 
    # @param role 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ProjectProjectTokenResponse]
    def project_service_create_token(project, role, body, opts = {})
      data, _status_code, _headers = project_service_create_token_with_http_info(project, role, body, opts)
      data
    end

    # Create a new project token
    # @param project 
    # @param role 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectProjectTokenResponse, Fixnum, Hash)>] ProjectProjectTokenResponse data, response status code and response headers
    def project_service_create_token_with_http_info(project, role, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_create_token ...'
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling ProjectServiceApi.project_service_create_token"
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling ProjectServiceApi.project_service_create_token"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectServiceApi.project_service_create_token"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project}/roles/{role}/token'.sub('{' + 'project' + '}', project.to_s).sub('{' + 'role' + '}', role.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectProjectTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete deletes a project
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ProjectEmptyResponse]
    def project_service_delete(name, opts = {})
      data, _status_code, _headers = project_service_delete_with_http_info(name, opts)
      data
    end

    # Delete deletes a project
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectEmptyResponse, Fixnum, Hash)>] ProjectEmptyResponse data, response status code and response headers
    def project_service_delete_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_delete"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectEmptyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a new project token
    # @param project 
    # @param role 
    # @param iat 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @return [ProjectEmptyResponse]
    def project_service_delete_token(project, role, iat, opts = {})
      data, _status_code, _headers = project_service_delete_token_with_http_info(project, role, iat, opts)
      data
    end

    # Delete a new project token
    # @param project 
    # @param role 
    # @param iat 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :id 
    # @return [Array<(ProjectEmptyResponse, Fixnum, Hash)>] ProjectEmptyResponse data, response status code and response headers
    def project_service_delete_token_with_http_info(project, role, iat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_delete_token ...'
      end
      # verify the required parameter 'project' is set
      if @api_client.config.client_side_validation && project.nil?
        fail ArgumentError, "Missing the required parameter 'project' when calling ProjectServiceApi.project_service_delete_token"
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling ProjectServiceApi.project_service_delete_token"
      end
      # verify the required parameter 'iat' is set
      if @api_client.config.client_side_validation && iat.nil?
        fail ArgumentError, "Missing the required parameter 'iat' when calling ProjectServiceApi.project_service_delete_token"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project}/roles/{role}/token/{iat}'.sub('{' + 'project' + '}', project.to_s).sub('{' + 'role' + '}', role.to_s).sub('{' + 'iat' + '}', iat.to_s)

      # query parameters
      query_params = {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectEmptyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_delete_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns a project by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1AppProject]
    def project_service_get(name, opts = {})
      data, _status_code, _headers = project_service_get_with_http_info(name, opts)
      data
    end

    # Get returns a project by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1AppProject, Fixnum, Hash)>] V1alpha1AppProject data, response status code and response headers
    def project_service_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_get"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1AppProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetDetailedProject returns a project that include project, global project and scoped resources by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ProjectDetailedProjectsResponse]
    def project_service_get_detailed_project(name, opts = {})
      data, _status_code, _headers = project_service_get_detailed_project_with_http_info(name, opts)
      data
    end

    # GetDetailedProject returns a project that include project, global project and scoped resources by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectDetailedProjectsResponse, Fixnum, Hash)>] ProjectDetailedProjectsResponse data, response status code and response headers
    def project_service_get_detailed_project_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_get_detailed_project ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_get_detailed_project"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}/detailed'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectDetailedProjectsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_get_detailed_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns a virtual project by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ProjectGlobalProjectsResponse]
    def project_service_get_global_projects(name, opts = {})
      data, _status_code, _headers = project_service_get_global_projects_with_http_info(name, opts)
      data
    end

    # Get returns a virtual project by name
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectGlobalProjectsResponse, Fixnum, Hash)>] ProjectGlobalProjectsResponse data, response status code and response headers
    def project_service_get_global_projects_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_get_global_projects ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_get_global_projects"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}/globalprojects'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectGlobalProjectsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_get_global_projects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetSchedulesState returns true if there are any active sync syncWindows
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ProjectSyncWindowsResponse]
    def project_service_get_sync_windows_state(name, opts = {})
      data, _status_code, _headers = project_service_get_sync_windows_state_with_http_info(name, opts)
      data
    end

    # GetSchedulesState returns true if there are any active sync syncWindows
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProjectSyncWindowsResponse, Fixnum, Hash)>] ProjectSyncWindowsResponse data, response status code and response headers
    def project_service_get_sync_windows_state_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_get_sync_windows_state ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_get_sync_windows_state"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}/syncwindows'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProjectSyncWindowsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_get_sync_windows_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List returns list of projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @return [V1alpha1AppProjectList]
    def project_service_list(opts = {})
      data, _status_code, _headers = project_service_list_with_http_info(opts)
      data
    end

    # List returns list of projects
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name 
    # @return [Array<(V1alpha1AppProjectList, Fixnum, Hash)>] V1alpha1AppProjectList data, response status code and response headers
    def project_service_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_list ...'
      end
      # resource path
      local_var_path = '/api/v1/projects'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1AppProjectList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListEvents returns a list of project events
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [V1EventList]
    def project_service_list_events(name, opts = {})
      data, _status_code, _headers = project_service_list_events_with_http_info(name, opts)
      data
    end

    # ListEvents returns a list of project events
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1EventList, Fixnum, Hash)>] V1EventList data, response status code and response headers
    def project_service_list_events_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_list_events ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_list_events"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}/events'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1EventList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_list_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListLinks returns all deep links for the particular project
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationLinksResponse]
    def project_service_list_links(name, opts = {})
      data, _status_code, _headers = project_service_list_links_with_http_info(name, opts)
      data
    end

    # ListLinks returns all deep links for the particular project
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationLinksResponse, Fixnum, Hash)>] ApplicationLinksResponse data, response status code and response headers
    def project_service_list_links_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_list_links ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ProjectServiceApi.project_service_list_links"
      end
      # resource path
      local_var_path = '/api/v1/projects/{name}/links'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationLinksResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_list_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update updates a project
    # @param project_metadata_name Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1AppProject]
    def project_service_update(project_metadata_name, body, opts = {})
      data, _status_code, _headers = project_service_update_with_http_info(project_metadata_name, body, opts)
      data
    end

    # Update updates a project
    # @param project_metadata_name Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1AppProject, Fixnum, Hash)>] V1alpha1AppProject data, response status code and response headers
    def project_service_update_with_http_info(project_metadata_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ProjectServiceApi.project_service_update ...'
      end
      # verify the required parameter 'project_metadata_name' is set
      if @api_client.config.client_side_validation && project_metadata_name.nil?
        fail ArgumentError, "Missing the required parameter 'project_metadata_name' when calling ProjectServiceApi.project_service_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ProjectServiceApi.project_service_update"
      end
      # resource path
      local_var_path = '/api/v1/projects/{project.metadata.name}'.sub('{' + 'project.metadata.name' + '}', project_metadata_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1AppProject')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProjectServiceApi#project_service_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
