=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class ApplicationSetServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create creates an applicationset
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @return [V1alpha1ApplicationSet]
    def application_set_service_create(body, opts = {})
      data, _status_code, _headers = application_set_service_create_with_http_info(body, opts)
      data
    end

    # Create creates an applicationset
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @return [Array<(V1alpha1ApplicationSet, Fixnum, Hash)>] V1alpha1ApplicationSet data, response status code and response headers
    def application_set_service_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSetServiceApi.application_set_service_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationSetServiceApi.application_set_service_create"
      end
      # resource path
      local_var_path = '/api/v1/applicationsets'

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSetServiceApi#application_set_service_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete deletes an application set
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [ApplicationsetApplicationSetResponse]
    def application_set_service_delete(name, opts = {})
      data, _status_code, _headers = application_set_service_delete_with_http_info(name, opts)
      data
    end

    # Delete deletes an application set
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApplicationsetApplicationSetResponse, Fixnum, Hash)>] ApplicationsetApplicationSetResponse data, response status code and response headers
    def application_set_service_delete_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSetServiceApi.application_set_service_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationSetServiceApi.application_set_service_delete"
      end
      # resource path
      local_var_path = '/api/v1/applicationsets/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationsetApplicationSetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSetServiceApi#application_set_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns an applicationset by name
    # @param name the applicationsets&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1ApplicationSet]
    def application_set_service_get(name, opts = {})
      data, _status_code, _headers = application_set_service_get_with_http_info(name, opts)
      data
    end

    # Get returns an applicationset by name
    # @param name the applicationsets&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1ApplicationSet, Fixnum, Hash)>] V1alpha1ApplicationSet data, response status code and response headers
    def application_set_service_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSetServiceApi.application_set_service_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationSetServiceApi.application_set_service_get"
      end
      # resource path
      local_var_path = '/api/v1/applicationsets/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSetServiceApi#application_set_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List returns list of applicationset
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :projects the project names to restrict returned list applicationsets.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @return [V1alpha1ApplicationSetList]
    def application_set_service_list(opts = {})
      data, _status_code, _headers = application_set_service_list_with_http_info(opts)
      data
    end

    # List returns list of applicationset
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :projects the project names to restrict returned list applicationsets.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @return [Array<(V1alpha1ApplicationSetList, Fixnum, Hash)>] V1alpha1ApplicationSetList data, response status code and response headers
    def application_set_service_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationSetServiceApi.application_set_service_list ...'
      end
      # resource path
      local_var_path = '/api/v1/applicationsets'

      # query parameters
      query_params = {}
      query_params[:'projects'] = @api_client.build_collection_param(opts[:'projects'], :multi) if !opts[:'projects'].nil?
      query_params[:'selector'] = opts[:'selector'] if !opts[:'selector'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationSetList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationSetServiceApi#application_set_service_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
