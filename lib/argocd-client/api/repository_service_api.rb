=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class RepositoryServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # CreateRepository creates a new repository configuration
    # @param body Repository definition
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert Whether to create in upsert mode.
    # @option opts [BOOLEAN] :creds_only Whether to operate on credential set instead of repository.
    # @return [V1alpha1Repository]
    def repository_service_create_repository(body, opts = {})
      data, _status_code, _headers = repository_service_create_repository_with_http_info(body, opts)
      data
    end

    # CreateRepository creates a new repository configuration
    # @param body Repository definition
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert Whether to create in upsert mode.
    # @option opts [BOOLEAN] :creds_only Whether to operate on credential set instead of repository.
    # @return [Array<(V1alpha1Repository, Fixnum, Hash)>] V1alpha1Repository data, response status code and response headers
    def repository_service_create_repository_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_create_repository ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RepositoryServiceApi.repository_service_create_repository"
      end
      # resource path
      local_var_path = '/api/v1/repositories'

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?
      query_params[:'credsOnly'] = opts[:'creds_only'] if !opts[:'creds_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_create_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # DeleteRepository deletes a repository from the configuration
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [RepositoryRepoResponse]
    def repository_service_delete_repository(repo, opts = {})
      data, _status_code, _headers = repository_service_delete_repository_with_http_info(repo, opts)
      data
    end

    # DeleteRepository deletes a repository from the configuration
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [Array<(RepositoryRepoResponse, Fixnum, Hash)>] RepositoryRepoResponse data, response status code and response headers
    def repository_service_delete_repository_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_delete_repository ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_delete_repository"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceRefresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryRepoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_delete_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns a repository or its credentials
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [V1alpha1Repository]
    def repository_service_get(repo, opts = {})
      data, _status_code, _headers = repository_service_get_with_http_info(repo, opts)
      data
    end

    # Get returns a repository or its credentials
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [Array<(V1alpha1Repository, Fixnum, Hash)>] V1alpha1Repository data, response status code and response headers
    def repository_service_get_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_get ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_get"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceRefresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetAppDetails returns application details by given path
    # @param source_repo_url RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [RepositoryRepoAppDetailsResponse]
    def repository_service_get_app_details(source_repo_url, body, opts = {})
      data, _status_code, _headers = repository_service_get_app_details_with_http_info(source_repo_url, body, opts)
      data
    end

    # GetAppDetails returns application details by given path
    # @param source_repo_url RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryRepoAppDetailsResponse, Fixnum, Hash)>] RepositoryRepoAppDetailsResponse data, response status code and response headers
    def repository_service_get_app_details_with_http_info(source_repo_url, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_get_app_details ...'
      end
      # verify the required parameter 'source_repo_url' is set
      if @api_client.config.client_side_validation && source_repo_url.nil?
        fail ArgumentError, "Missing the required parameter 'source_repo_url' when calling RepositoryServiceApi.repository_service_get_app_details"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RepositoryServiceApi.repository_service_get_app_details"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{source.repoURL}/appdetails'.sub('{' + 'source.repoURL' + '}', source_repo_url.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryRepoAppDetailsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_get_app_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetHelmCharts returns list of helm charts in the specified repository
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [RepositoryHelmChartsResponse]
    def repository_service_get_helm_charts(repo, opts = {})
      data, _status_code, _headers = repository_service_get_helm_charts_with_http_info(repo, opts)
      data
    end

    # GetHelmCharts returns list of helm charts in the specified repository
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [Array<(RepositoryHelmChartsResponse, Fixnum, Hash)>] RepositoryHelmChartsResponse data, response status code and response headers
    def repository_service_get_helm_charts_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_get_helm_charts ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_get_helm_charts"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}/helmcharts'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceRefresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryHelmChartsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_get_helm_charts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListApps returns list of apps in the repo
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :revision 
    # @option opts [String] :app_name 
    # @option opts [String] :app_project 
    # @return [RepositoryRepoAppsResponse]
    def repository_service_list_apps(repo, opts = {})
      data, _status_code, _headers = repository_service_list_apps_with_http_info(repo, opts)
      data
    end

    # ListApps returns list of apps in the repo
    # @param repo 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :revision 
    # @option opts [String] :app_name 
    # @option opts [String] :app_project 
    # @return [Array<(RepositoryRepoAppsResponse, Fixnum, Hash)>] RepositoryRepoAppsResponse data, response status code and response headers
    def repository_service_list_apps_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_list_apps ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_list_apps"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}/apps'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'appName'] = opts[:'app_name'] if !opts[:'app_name'].nil?
      query_params[:'appProject'] = opts[:'app_project'] if !opts[:'app_project'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryRepoAppsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_list_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [RepositoryRefs]
    def repository_service_list_refs(repo, opts = {})
      data, _status_code, _headers = repository_service_list_refs_with_http_info(repo, opts)
      data
    end

    # @param repo Repo URL for query
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [Array<(RepositoryRefs, Fixnum, Hash)>] RepositoryRefs data, response status code and response headers
    def repository_service_list_refs_with_http_info(repo, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_list_refs ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_list_refs"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}/refs'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceRefresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryRefs')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_list_refs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListRepositories gets a list of all configured repositories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repo Repo URL for query.
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [V1alpha1RepositoryList]
    def repository_service_list_repositories(opts = {})
      data, _status_code, _headers = repository_service_list_repositories_with_http_info(opts)
      data
    end

    # ListRepositories gets a list of all configured repositories
    # @param [Hash] opts the optional parameters
    # @option opts [String] :repo Repo URL for query.
    # @option opts [BOOLEAN] :force_refresh Whether to force a cache refresh on repo&#39;s connection state.
    # @return [Array<(V1alpha1RepositoryList, Fixnum, Hash)>] V1alpha1RepositoryList data, response status code and response headers
    def repository_service_list_repositories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_list_repositories ...'
      end
      # resource path
      local_var_path = '/api/v1/repositories'

      # query parameters
      query_params = {}
      query_params[:'repo'] = opts[:'repo'] if !opts[:'repo'].nil?
      query_params[:'forceRefresh'] = opts[:'force_refresh'] if !opts[:'force_refresh'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1RepositoryList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_list_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UpdateRepository updates a repository configuration
    # @param repo_repo Repo contains the URL to the remote repository
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1Repository]
    def repository_service_update_repository(repo_repo, body, opts = {})
      data, _status_code, _headers = repository_service_update_repository_with_http_info(repo_repo, body, opts)
      data
    end

    # UpdateRepository updates a repository configuration
    # @param repo_repo Repo contains the URL to the remote repository
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1Repository, Fixnum, Hash)>] V1alpha1Repository data, response status code and response headers
    def repository_service_update_repository_with_http_info(repo_repo, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_update_repository ...'
      end
      # verify the required parameter 'repo_repo' is set
      if @api_client.config.client_side_validation && repo_repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo_repo' when calling RepositoryServiceApi.repository_service_update_repository"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RepositoryServiceApi.repository_service_update_repository"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo.repo}'.sub('{' + 'repo.repo' + '}', repo_repo.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Repository')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_update_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ValidateAccess validates access to a repository with given parameters
    # @param repo The URL to the repo
    # @param body The URL to the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username for accessing repo.
    # @option opts [String] :password Password for accessing repo.
    # @option opts [String] :ssh_private_key Private key data for accessing SSH repository.
    # @option opts [BOOLEAN] :insecure Whether to skip certificate or host key validation.
    # @option opts [String] :tls_client_cert_data TLS client cert data for accessing HTTPS repository.
    # @option opts [String] :tls_client_cert_key TLS client cert key for accessing HTTPS repository.
    # @option opts [String] :type The type of the repo.
    # @option opts [String] :name The name of the repo.
    # @option opts [BOOLEAN] :enable_oci Whether helm-oci support should be enabled for this repo.
    # @option opts [String] :github_app_private_key Github App Private Key PEM data.
    # @option opts [String] :github_app_id Github App ID of the app used to access the repo.
    # @option opts [String] :github_app_installation_id Github App Installation ID of the installed GitHub App.
    # @option opts [String] :github_app_enterprise_base_url Github App Enterprise base url if empty will default to https://api.github.com.
    # @option opts [String] :proxy HTTP/HTTPS proxy to access the repository.
    # @option opts [String] :project Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.
    # @option opts [String] :gcp_service_account_key Google Cloud Platform service account key.
    # @option opts [BOOLEAN] :force_http_basic_auth Whether to force HTTP basic auth.
    # @return [RepositoryRepoResponse]
    def repository_service_validate_access(repo, body, opts = {})
      data, _status_code, _headers = repository_service_validate_access_with_http_info(repo, body, opts)
      data
    end

    # ValidateAccess validates access to a repository with given parameters
    # @param repo The URL to the repo
    # @param body The URL to the repo
    # @param [Hash] opts the optional parameters
    # @option opts [String] :username Username for accessing repo.
    # @option opts [String] :password Password for accessing repo.
    # @option opts [String] :ssh_private_key Private key data for accessing SSH repository.
    # @option opts [BOOLEAN] :insecure Whether to skip certificate or host key validation.
    # @option opts [String] :tls_client_cert_data TLS client cert data for accessing HTTPS repository.
    # @option opts [String] :tls_client_cert_key TLS client cert key for accessing HTTPS repository.
    # @option opts [String] :type The type of the repo.
    # @option opts [String] :name The name of the repo.
    # @option opts [BOOLEAN] :enable_oci Whether helm-oci support should be enabled for this repo.
    # @option opts [String] :github_app_private_key Github App Private Key PEM data.
    # @option opts [String] :github_app_id Github App ID of the app used to access the repo.
    # @option opts [String] :github_app_installation_id Github App Installation ID of the installed GitHub App.
    # @option opts [String] :github_app_enterprise_base_url Github App Enterprise base url if empty will default to https://api.github.com.
    # @option opts [String] :proxy HTTP/HTTPS proxy to access the repository.
    # @option opts [String] :project Reference between project and repository that allow you automatically to be added as item inside SourceRepos project entity.
    # @option opts [String] :gcp_service_account_key Google Cloud Platform service account key.
    # @option opts [BOOLEAN] :force_http_basic_auth Whether to force HTTP basic auth.
    # @return [Array<(RepositoryRepoResponse, Fixnum, Hash)>] RepositoryRepoResponse data, response status code and response headers
    def repository_service_validate_access_with_http_info(repo, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RepositoryServiceApi.repository_service_validate_access ...'
      end
      # verify the required parameter 'repo' is set
      if @api_client.config.client_side_validation && repo.nil?
        fail ArgumentError, "Missing the required parameter 'repo' when calling RepositoryServiceApi.repository_service_validate_access"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling RepositoryServiceApi.repository_service_validate_access"
      end
      # resource path
      local_var_path = '/api/v1/repositories/{repo}/validate'.sub('{' + 'repo' + '}', repo.to_s)

      # query parameters
      query_params = {}
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'sshPrivateKey'] = opts[:'ssh_private_key'] if !opts[:'ssh_private_key'].nil?
      query_params[:'insecure'] = opts[:'insecure'] if !opts[:'insecure'].nil?
      query_params[:'tlsClientCertData'] = opts[:'tls_client_cert_data'] if !opts[:'tls_client_cert_data'].nil?
      query_params[:'tlsClientCertKey'] = opts[:'tls_client_cert_key'] if !opts[:'tls_client_cert_key'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'enableOci'] = opts[:'enable_oci'] if !opts[:'enable_oci'].nil?
      query_params[:'githubAppPrivateKey'] = opts[:'github_app_private_key'] if !opts[:'github_app_private_key'].nil?
      query_params[:'githubAppID'] = opts[:'github_app_id'] if !opts[:'github_app_id'].nil?
      query_params[:'githubAppInstallationID'] = opts[:'github_app_installation_id'] if !opts[:'github_app_installation_id'].nil?
      query_params[:'githubAppEnterpriseBaseUrl'] = opts[:'github_app_enterprise_base_url'] if !opts[:'github_app_enterprise_base_url'].nil?
      query_params[:'proxy'] = opts[:'proxy'] if !opts[:'proxy'].nil?
      query_params[:'project'] = opts[:'project'] if !opts[:'project'].nil?
      query_params[:'gcpServiceAccountKey'] = opts[:'gcp_service_account_key'] if !opts[:'gcp_service_account_key'].nil?
      query_params[:'forceHttpBasicAuth'] = opts[:'force_http_basic_auth'] if !opts[:'force_http_basic_auth'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryRepoResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RepositoryServiceApi#repository_service_validate_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
