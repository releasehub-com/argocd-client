=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class ApplicationServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create creates an application
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @option opts [BOOLEAN] :validate 
    # @return [V1alpha1Application]
    def application_service_create(body, opts = {})
      data, _status_code, _headers = application_service_create_with_http_info(body, opts)
      data
    end

    # Create creates an application
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :upsert 
    # @option opts [BOOLEAN] :validate 
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_create"
      end
      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = {}
      query_params[:'upsert'] = opts[:'upsert'] if !opts[:'upsert'].nil?
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete deletes an application
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade 
    # @option opts [String] :propagation_policy 
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationResponse]
    def application_service_delete(name, opts = {})
      data, _status_code, _headers = application_service_delete_with_http_info(name, opts)
      data
    end

    # Delete deletes an application
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :cascade 
    # @option opts [String] :propagation_policy 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationResponse, Fixnum, Hash)>] ApplicationApplicationResponse data, response status code and response headers
    def application_service_delete_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_delete ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_delete"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'cascade'] = opts[:'cascade'] if !opts[:'cascade'].nil?
      query_params[:'propagationPolicy'] = opts[:'propagation_policy'] if !opts[:'propagation_policy'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # DeleteResource deletes a single application resource
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [BOOLEAN] :force 
    # @option opts [BOOLEAN] :orphan 
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationResponse]
    def application_service_delete_resource(name, opts = {})
      data, _status_code, _headers = application_service_delete_resource_with_http_info(name, opts)
      data
    end

    # DeleteResource deletes a single application resource
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [BOOLEAN] :force 
    # @option opts [BOOLEAN] :orphan 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationResponse, Fixnum, Hash)>] ApplicationApplicationResponse data, response status code and response headers
    def application_service_delete_resource_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_delete_resource ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_delete_resource"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?
      query_params[:'orphan'] = opts[:'orphan'] if !opts[:'orphan'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_delete_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns an application by name
    # @param name the application&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [V1alpha1Application]
    def application_service_get(name, opts = {})
      data, _status_code, _headers = application_service_get_with_http_info(name, opts)
      data
    end

    # Get returns an application by name
    # @param name the application&#39;s name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_get"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'projects'] = @api_client.build_collection_param(opts[:'projects'], :multi) if !opts[:'projects'].nil?
      query_params[:'resourceVersion'] = opts[:'resource_version'] if !opts[:'resource_version'].nil?
      query_params[:'selector'] = opts[:'selector'] if !opts[:'selector'].nil?
      query_params[:'repo'] = opts[:'repo'] if !opts[:'repo'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?
      query_params[:'project'] = @api_client.build_collection_param(opts[:'project'], :multi) if !opts[:'project'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get returns sync windows of the application
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationSyncWindowsResponse]
    def application_service_get_application_sync_windows(name, opts = {})
      data, _status_code, _headers = application_service_get_application_sync_windows_with_http_info(name, opts)
      data
    end

    # Get returns sync windows of the application
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationSyncWindowsResponse, Fixnum, Hash)>] ApplicationApplicationSyncWindowsResponse data, response status code and response headers
    def application_service_get_application_sync_windows_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_get_application_sync_windows ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_get_application_sync_windows"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/syncwindows'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationSyncWindowsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_get_application_sync_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetManifests returns application manifests
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :revision 
    # @option opts [String] :app_namespace 
    # @return [RepositoryManifestResponse]
    def application_service_get_manifests(name, opts = {})
      data, _status_code, _headers = application_service_get_manifests_with_http_info(name, opts)
      data
    end

    # GetManifests returns application manifests
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :revision 
    # @option opts [String] :app_namespace 
    # @return [Array<(RepositoryManifestResponse, Fixnum, Hash)>] RepositoryManifestResponse data, response status code and response headers
    def application_service_get_manifests_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_get_manifests ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_get_manifests"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/manifests'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'revision'] = opts[:'revision'] if !opts[:'revision'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryManifestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_get_manifests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetManifestsWithFiles returns application manifests using provided files to generate them
    # @param body  (streaming inputs)
    # @param [Hash] opts the optional parameters
    # @return [RepositoryManifestResponse]
    def application_service_get_manifests_with_files(body, opts = {})
      data, _status_code, _headers = application_service_get_manifests_with_files_with_http_info(body, opts)
      data
    end

    # GetManifestsWithFiles returns application manifests using provided files to generate them
    # @param body  (streaming inputs)
    # @param [Hash] opts the optional parameters
    # @return [Array<(RepositoryManifestResponse, Fixnum, Hash)>] RepositoryManifestResponse data, response status code and response headers
    def application_service_get_manifests_with_files_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_get_manifests_with_files ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_get_manifests_with_files"
      end
      # resource path
      local_var_path = '/api/v1/applications/manifestsWithFiles'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RepositoryManifestResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_get_manifests_with_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetResource returns single application resource
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationResourceResponse]
    def application_service_get_resource(name, opts = {})
      data, _status_code, _headers = application_service_get_resource_with_http_info(name, opts)
      data
    end

    # GetResource returns single application resource
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationResourceResponse, Fixnum, Hash)>] ApplicationApplicationResourceResponse data, response status code and response headers
    def application_service_get_resource_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_get_resource ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_get_resource"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationResourceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_get_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List returns list of applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name the application&#39;s name.
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [V1alpha1ApplicationList]
    def application_service_list(opts = {})
      data, _status_code, _headers = application_service_list_with_http_info(opts)
      data
    end

    # List returns list of applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name the application&#39;s name.
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [Array<(V1alpha1ApplicationList, Fixnum, Hash)>] V1alpha1ApplicationList data, response status code and response headers
    def application_service_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_list ...'
      end
      # resource path
      local_var_path = '/api/v1/applications'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'projects'] = @api_client.build_collection_param(opts[:'projects'], :multi) if !opts[:'projects'].nil?
      query_params[:'resourceVersion'] = opts[:'resource_version'] if !opts[:'resource_version'].nil?
      query_params[:'selector'] = opts[:'selector'] if !opts[:'selector'].nil?
      query_params[:'repo'] = opts[:'repo'] if !opts[:'repo'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?
      query_params[:'project'] = @api_client.build_collection_param(opts[:'project'], :multi) if !opts[:'project'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListLinks returns the list of all application deep links
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @return [ApplicationLinksResponse]
    def application_service_list_links(name, opts = {})
      data, _status_code, _headers = application_service_list_links_with_http_info(name, opts)
      data
    end

    # ListLinks returns the list of all application deep links
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @return [Array<(ApplicationLinksResponse, Fixnum, Hash)>] ApplicationLinksResponse data, response status code and response headers
    def application_service_list_links_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_list_links ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_list_links"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/links'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationLinksResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_list_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListResourceActions returns list of resource actions
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [ApplicationResourceActionsListResponse]
    def application_service_list_resource_actions(name, opts = {})
      data, _status_code, _headers = application_service_list_resource_actions_with_http_info(name, opts)
      data
    end

    # ListResourceActions returns list of resource actions
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationResourceActionsListResponse, Fixnum, Hash)>] ApplicationResourceActionsListResponse data, response status code and response headers
    def application_service_list_resource_actions_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_list_resource_actions ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_list_resource_actions"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource/actions'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationResourceActionsListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_list_resource_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListResourceEvents returns a list of event resources
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :resource_uid 
    # @option opts [String] :app_namespace 
    # @return [V1EventList]
    def application_service_list_resource_events(name, opts = {})
      data, _status_code, _headers = application_service_list_resource_events_with_http_info(name, opts)
      data
    end

    # ListResourceEvents returns a list of event resources
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :resource_uid 
    # @option opts [String] :app_namespace 
    # @return [Array<(V1EventList, Fixnum, Hash)>] V1EventList data, response status code and response headers
    def application_service_list_resource_events_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_list_resource_events ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_list_resource_events"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/events'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'resourceNamespace'] = opts[:'resource_namespace'] if !opts[:'resource_namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'resourceUID'] = opts[:'resource_uid'] if !opts[:'resource_uid'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1EventList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_list_resource_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListResourceLinks returns the list of all resource deep links
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [ApplicationLinksResponse]
    def application_service_list_resource_links(name, opts = {})
      data, _status_code, _headers = application_service_list_resource_links_with_http_info(name, opts)
      data
    end

    # ListResourceLinks returns the list of all resource deep links
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationLinksResponse, Fixnum, Hash)>] ApplicationLinksResponse data, response status code and response headers
    def application_service_list_resource_links_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_list_resource_links ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_list_resource_links"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource/links'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationLinksResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_list_resource_links\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ManagedResources returns list of managed resources
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [ApplicationManagedResourcesResponse]
    def application_service_managed_resources(application_name, opts = {})
      data, _status_code, _headers = application_service_managed_resources_with_http_info(application_name, opts)
      data
    end

    # ManagedResources returns list of managed resources
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationManagedResourcesResponse, Fixnum, Hash)>] ApplicationManagedResourcesResponse data, response status code and response headers
    def application_service_managed_resources_with_http_info(application_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_managed_resources ...'
      end
      # verify the required parameter 'application_name' is set
      if @api_client.config.client_side_validation && application_name.nil?
        fail ArgumentError, "Missing the required parameter 'application_name' when calling ApplicationServiceApi.application_service_managed_resources"
      end
      # resource path
      local_var_path = '/api/v1/applications/{applicationName}/managed-resources'.sub('{' + 'applicationName' + '}', application_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationManagedResourcesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_managed_resources\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Patch patch an application
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1Application]
    def application_service_patch(name, body, opts = {})
      data, _status_code, _headers = application_service_patch_with_http_info(name, body, opts)
      data
    end

    # Patch patch an application
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_patch_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_patch ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_patch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_patch"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PatchResource patch single application resource
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :patch_type 
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationResourceResponse]
    def application_service_patch_resource(name, body, opts = {})
      data, _status_code, _headers = application_service_patch_resource_with_http_info(name, body, opts)
      data
    end

    # PatchResource patch single application resource
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :patch_type 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationResourceResponse, Fixnum, Hash)>] ApplicationApplicationResourceResponse data, response status code and response headers
    def application_service_patch_resource_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_patch_resource ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_patch_resource"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_patch_resource"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'patchType'] = opts[:'patch_type'] if !opts[:'patch_type'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationResourceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_patch_resource\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PodLogs returns stream of log entries for the specified pod. Pod
    # @param name 
    # @param pod_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :container 
    # @option opts [String] :since_seconds 
    # @option opts [String] :since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [String] :tail_lines 
    # @option opts [BOOLEAN] :follow 
    # @option opts [String] :until_time 
    # @option opts [String] :filter 
    # @option opts [String] :kind 
    # @option opts [String] :group 
    # @option opts [String] :resource_name 
    # @option opts [BOOLEAN] :previous 
    # @option opts [String] :app_namespace 
    # @return [StreamResultOfApplicationLogEntry]
    def application_service_pod_logs(name, pod_name, opts = {})
      data, _status_code, _headers = application_service_pod_logs_with_http_info(name, pod_name, opts)
      data
    end

    # PodLogs returns stream of log entries for the specified pod. Pod
    # @param name 
    # @param pod_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :container 
    # @option opts [String] :since_seconds 
    # @option opts [String] :since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [String] :tail_lines 
    # @option opts [BOOLEAN] :follow 
    # @option opts [String] :until_time 
    # @option opts [String] :filter 
    # @option opts [String] :kind 
    # @option opts [String] :group 
    # @option opts [String] :resource_name 
    # @option opts [BOOLEAN] :previous 
    # @option opts [String] :app_namespace 
    # @return [Array<(StreamResultOfApplicationLogEntry, Fixnum, Hash)>] StreamResultOfApplicationLogEntry data, response status code and response headers
    def application_service_pod_logs_with_http_info(name, pod_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_pod_logs ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_pod_logs"
      end
      # verify the required parameter 'pod_name' is set
      if @api_client.config.client_side_validation && pod_name.nil?
        fail ArgumentError, "Missing the required parameter 'pod_name' when calling ApplicationServiceApi.application_service_pod_logs"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/pods/{podName}/logs'.sub('{' + 'name' + '}', name.to_s).sub('{' + 'podName' + '}', pod_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'container'] = opts[:'container'] if !opts[:'container'].nil?
      query_params[:'sinceSeconds'] = opts[:'since_seconds'] if !opts[:'since_seconds'].nil?
      query_params[:'sinceTime.seconds'] = opts[:'since_time_seconds'] if !opts[:'since_time_seconds'].nil?
      query_params[:'sinceTime.nanos'] = opts[:'since_time_nanos'] if !opts[:'since_time_nanos'].nil?
      query_params[:'tailLines'] = opts[:'tail_lines'] if !opts[:'tail_lines'].nil?
      query_params[:'follow'] = opts[:'follow'] if !opts[:'follow'].nil?
      query_params[:'untilTime'] = opts[:'until_time'] if !opts[:'until_time'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamResultOfApplicationLogEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_pod_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # PodLogs returns stream of log entries for the specified pod. Pod
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :pod_name 
    # @option opts [String] :container 
    # @option opts [String] :since_seconds 
    # @option opts [String] :since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [String] :tail_lines 
    # @option opts [BOOLEAN] :follow 
    # @option opts [String] :until_time 
    # @option opts [String] :filter 
    # @option opts [String] :kind 
    # @option opts [String] :group 
    # @option opts [String] :resource_name 
    # @option opts [BOOLEAN] :previous 
    # @option opts [String] :app_namespace 
    # @return [StreamResultOfApplicationLogEntry]
    def application_service_pod_logs2(name, opts = {})
      data, _status_code, _headers = application_service_pod_logs2_with_http_info(name, opts)
      data
    end

    # PodLogs returns stream of log entries for the specified pod. Pod
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :pod_name 
    # @option opts [String] :container 
    # @option opts [String] :since_seconds 
    # @option opts [String] :since_time_seconds Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    # @option opts [Integer] :since_time_nanos Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    # @option opts [String] :tail_lines 
    # @option opts [BOOLEAN] :follow 
    # @option opts [String] :until_time 
    # @option opts [String] :filter 
    # @option opts [String] :kind 
    # @option opts [String] :group 
    # @option opts [String] :resource_name 
    # @option opts [BOOLEAN] :previous 
    # @option opts [String] :app_namespace 
    # @return [Array<(StreamResultOfApplicationLogEntry, Fixnum, Hash)>] StreamResultOfApplicationLogEntry data, response status code and response headers
    def application_service_pod_logs2_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_pod_logs2 ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_pod_logs2"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/logs'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'podName'] = opts[:'pod_name'] if !opts[:'pod_name'].nil?
      query_params[:'container'] = opts[:'container'] if !opts[:'container'].nil?
      query_params[:'sinceSeconds'] = opts[:'since_seconds'] if !opts[:'since_seconds'].nil?
      query_params[:'sinceTime.seconds'] = opts[:'since_time_seconds'] if !opts[:'since_time_seconds'].nil?
      query_params[:'sinceTime.nanos'] = opts[:'since_time_nanos'] if !opts[:'since_time_nanos'].nil?
      query_params[:'tailLines'] = opts[:'tail_lines'] if !opts[:'tail_lines'].nil?
      query_params[:'follow'] = opts[:'follow'] if !opts[:'follow'].nil?
      query_params[:'untilTime'] = opts[:'until_time'] if !opts[:'until_time'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'previous'] = opts[:'previous'] if !opts[:'previous'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamResultOfApplicationLogEntry')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_pod_logs2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ResourceTree returns resource tree
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [V1alpha1ApplicationTree]
    def application_service_resource_tree(application_name, opts = {})
      data, _status_code, _headers = application_service_resource_tree_with_http_info(application_name, opts)
      data
    end

    # ResourceTree returns resource tree
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(V1alpha1ApplicationTree, Fixnum, Hash)>] V1alpha1ApplicationTree data, response status code and response headers
    def application_service_resource_tree_with_http_info(application_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_resource_tree ...'
      end
      # verify the required parameter 'application_name' is set
      if @api_client.config.client_side_validation && application_name.nil?
        fail ArgumentError, "Missing the required parameter 'application_name' when calling ApplicationServiceApi.application_service_resource_tree"
      end
      # resource path
      local_var_path = '/api/v1/applications/{applicationName}/resource-tree'.sub('{' + 'applicationName' + '}', application_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_resource_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get the meta-data (author, date, tags, message) for a specific revision of the application
    # @param name the application&#39;s name
    # @param revision the revision of the app
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @return [V1alpha1RevisionMetadata]
    def application_service_revision_metadata(name, revision, opts = {})
      data, _status_code, _headers = application_service_revision_metadata_with_http_info(name, revision, opts)
      data
    end

    # Get the meta-data (author, date, tags, message) for a specific revision of the application
    # @param name the application&#39;s name
    # @param revision the revision of the app
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @return [Array<(V1alpha1RevisionMetadata, Fixnum, Hash)>] V1alpha1RevisionMetadata data, response status code and response headers
    def application_service_revision_metadata_with_http_info(name, revision, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_revision_metadata ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_revision_metadata"
      end
      # verify the required parameter 'revision' is set
      if @api_client.config.client_side_validation && revision.nil?
        fail ArgumentError, "Missing the required parameter 'revision' when calling ApplicationServiceApi.application_service_revision_metadata"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/revisions/{revision}/metadata'.sub('{' + 'name' + '}', name.to_s).sub('{' + 'revision' + '}', revision.to_s)

      # query parameters
      query_params = {}
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1RevisionMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_revision_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rollback syncs an application to its target state
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1Application]
    def application_service_rollback(name, body, opts = {})
      data, _status_code, _headers = application_service_rollback_with_http_info(name, body, opts)
      data
    end

    # Rollback syncs an application to its target state
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_rollback_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_rollback ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_rollback"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_rollback"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/rollback'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_rollback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # RunResourceAction run resource action
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [ApplicationApplicationResponse]
    def application_service_run_resource_action(name, body, opts = {})
      data, _status_code, _headers = application_service_run_resource_action_with_http_info(name, body, opts)
      data
    end

    # RunResourceAction run resource action
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :resource_name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationApplicationResponse, Fixnum, Hash)>] ApplicationApplicationResponse data, response status code and response headers
    def application_service_run_resource_action_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_run_resource_action ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_run_resource_action"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_run_resource_action"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/resource/actions'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'resourceName'] = opts[:'resource_name'] if !opts[:'resource_name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationApplicationResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_run_resource_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Sync syncs an application to its target state
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [V1alpha1Application]
    def application_service_sync(name, body, opts = {})
      data, _status_code, _headers = application_service_sync_with_http_info(name, body, opts)
      data
    end

    # Sync syncs an application to its target state
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_sync_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_sync ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_sync"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_sync"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/sync'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_sync\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # TerminateOperation terminates the currently running operation
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace 
    # @return [ApplicationOperationTerminateResponse]
    def application_service_terminate_operation(name, opts = {})
      data, _status_code, _headers = application_service_terminate_operation_with_http_info(name, opts)
      data
    end

    # TerminateOperation terminates the currently running operation
    # @param name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_namespace 
    # @return [Array<(ApplicationOperationTerminateResponse, Fixnum, Hash)>] ApplicationOperationTerminateResponse data, response status code and response headers
    def application_service_terminate_operation_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_terminate_operation ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_terminate_operation"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/operation'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApplicationOperationTerminateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_terminate_operation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update updates an application
    # @param application_metadata_name Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate 
    # @return [V1alpha1Application]
    def application_service_update(application_metadata_name, body, opts = {})
      data, _status_code, _headers = application_service_update_with_http_info(application_metadata_name, body, opts)
      data
    end

    # Update updates an application
    # @param application_metadata_name Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names +optional
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate 
    # @return [Array<(V1alpha1Application, Fixnum, Hash)>] V1alpha1Application data, response status code and response headers
    def application_service_update_with_http_info(application_metadata_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_update ...'
      end
      # verify the required parameter 'application_metadata_name' is set
      if @api_client.config.client_side_validation && application_metadata_name.nil?
        fail ArgumentError, "Missing the required parameter 'application_metadata_name' when calling ApplicationServiceApi.application_service_update"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_update"
      end
      # resource path
      local_var_path = '/api/v1/applications/{application.metadata.name}'.sub('{' + 'application.metadata.name' + '}', application_metadata_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1Application')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UpdateSpec updates an application spec
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate 
    # @option opts [String] :app_namespace 
    # @return [V1alpha1ApplicationSpec]
    def application_service_update_spec(name, body, opts = {})
      data, _status_code, _headers = application_service_update_spec_with_http_info(name, body, opts)
      data
    end

    # UpdateSpec updates an application spec
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :validate 
    # @option opts [String] :app_namespace 
    # @return [Array<(V1alpha1ApplicationSpec, Fixnum, Hash)>] V1alpha1ApplicationSpec data, response status code and response headers
    def application_service_update_spec_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_update_spec ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ApplicationServiceApi.application_service_update_spec"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ApplicationServiceApi.application_service_update_spec"
      end
      # resource path
      local_var_path = '/api/v1/applications/{name}/spec'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'validate'] = opts[:'validate'] if !opts[:'validate'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'V1alpha1ApplicationSpec')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_update_spec\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Watch returns stream of application change events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name the application&#39;s name.
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [StreamResultOfV1alpha1ApplicationWatchEvent]
    def application_service_watch(opts = {})
      data, _status_code, _headers = application_service_watch_with_http_info(opts)
      data
    end

    # Watch returns stream of application change events
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name the application&#39;s name.
    # @option opts [String] :refresh forces application reconciliation if set to true.
    # @option opts [Array<String>] :projects the project names to restrict returned list applications.
    # @option opts [String] :resource_version when specified with a watch call, shows changes that occur after that particular version of a resource.
    # @option opts [String] :selector the selector to restrict returned list to applications only with matched labels.
    # @option opts [String] :repo the repoURL to restrict returned list applications.
    # @option opts [String] :app_namespace the application&#39;s namespace.
    # @option opts [Array<String>] :project the project names to restrict returned list applications (legacy name for backwards-compatibility).
    # @return [Array<(StreamResultOfV1alpha1ApplicationWatchEvent, Fixnum, Hash)>] StreamResultOfV1alpha1ApplicationWatchEvent data, response status code and response headers
    def application_service_watch_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_watch ...'
      end
      # resource path
      local_var_path = '/api/v1/stream/applications'

      # query parameters
      query_params = {}
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'projects'] = @api_client.build_collection_param(opts[:'projects'], :multi) if !opts[:'projects'].nil?
      query_params[:'resourceVersion'] = opts[:'resource_version'] if !opts[:'resource_version'].nil?
      query_params[:'selector'] = opts[:'selector'] if !opts[:'selector'].nil?
      query_params[:'repo'] = opts[:'repo'] if !opts[:'repo'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?
      query_params[:'project'] = @api_client.build_collection_param(opts[:'project'], :multi) if !opts[:'project'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamResultOfV1alpha1ApplicationWatchEvent')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_watch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Watch returns stream of application resource tree
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [StreamResultOfV1alpha1ApplicationTree]
    def application_service_watch_resource_tree(application_name, opts = {})
      data, _status_code, _headers = application_service_watch_resource_tree_with_http_info(application_name, opts)
      data
    end

    # Watch returns stream of application resource tree
    # @param application_name 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :namespace 
    # @option opts [String] :name 
    # @option opts [String] :version 
    # @option opts [String] :group 
    # @option opts [String] :kind 
    # @option opts [String] :app_namespace 
    # @return [Array<(StreamResultOfV1alpha1ApplicationTree, Fixnum, Hash)>] StreamResultOfV1alpha1ApplicationTree data, response status code and response headers
    def application_service_watch_resource_tree_with_http_info(application_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationServiceApi.application_service_watch_resource_tree ...'
      end
      # verify the required parameter 'application_name' is set
      if @api_client.config.client_side_validation && application_name.nil?
        fail ArgumentError, "Missing the required parameter 'application_name' when calling ApplicationServiceApi.application_service_watch_resource_tree"
      end
      # resource path
      local_var_path = '/api/v1/stream/applications/{applicationName}/resource-tree'.sub('{' + 'applicationName' + '}', application_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'namespace'] = opts[:'namespace'] if !opts[:'namespace'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'kind'] = opts[:'kind'] if !opts[:'kind'].nil?
      query_params[:'appNamespace'] = opts[:'app_namespace'] if !opts[:'app_namespace'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StreamResultOfV1alpha1ApplicationTree')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationServiceApi#application_service_watch_resource_tree\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
