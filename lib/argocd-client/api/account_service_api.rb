=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'uri'

module ArgoCD
  class AccountServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # CanI checks if the current account has permission to perform an action
    # @param resource 
    # @param action 
    # @param subresource 
    # @param [Hash] opts the optional parameters
    # @return [AccountCanIResponse]
    def account_service_can_i(resource, action, subresource, opts = {})
      data, _status_code, _headers = account_service_can_i_with_http_info(resource, action, subresource, opts)
      data
    end

    # CanI checks if the current account has permission to perform an action
    # @param resource 
    # @param action 
    # @param subresource 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountCanIResponse, Fixnum, Hash)>] AccountCanIResponse data, response status code and response headers
    def account_service_can_i_with_http_info(resource, action, subresource, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_can_i ...'
      end
      # verify the required parameter 'resource' is set
      if @api_client.config.client_side_validation && resource.nil?
        fail ArgumentError, "Missing the required parameter 'resource' when calling AccountServiceApi.account_service_can_i"
      end
      # verify the required parameter 'action' is set
      if @api_client.config.client_side_validation && action.nil?
        fail ArgumentError, "Missing the required parameter 'action' when calling AccountServiceApi.account_service_can_i"
      end
      # verify the required parameter 'subresource' is set
      if @api_client.config.client_side_validation && subresource.nil?
        fail ArgumentError, "Missing the required parameter 'subresource' when calling AccountServiceApi.account_service_can_i"
      end
      # resource path
      local_var_path = '/api/v1/account/can-i/{resource}/{action}/{subresource}'.sub('{' + 'resource' + '}', resource.to_s).sub('{' + 'action' + '}', action.to_s).sub('{' + 'subresource' + '}', subresource.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountCanIResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_can_i\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # CreateToken creates a token
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AccountCreateTokenResponse]
    def account_service_create_token(name, body, opts = {})
      data, _status_code, _headers = account_service_create_token_with_http_info(name, body, opts)
      data
    end

    # CreateToken creates a token
    # @param name 
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountCreateTokenResponse, Fixnum, Hash)>] AccountCreateTokenResponse data, response status code and response headers
    def account_service_create_token_with_http_info(name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_create_token ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AccountServiceApi.account_service_create_token"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountServiceApi.account_service_create_token"
      end
      # resource path
      local_var_path = '/api/v1/account/{name}/token'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountCreateTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_create_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # DeleteToken deletes a token
    # @param name 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [AccountEmptyResponse]
    def account_service_delete_token(name, id, opts = {})
      data, _status_code, _headers = account_service_delete_token_with_http_info(name, id, opts)
      data
    end

    # DeleteToken deletes a token
    # @param name 
    # @param id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountEmptyResponse, Fixnum, Hash)>] AccountEmptyResponse data, response status code and response headers
    def account_service_delete_token_with_http_info(name, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_delete_token ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AccountServiceApi.account_service_delete_token"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AccountServiceApi.account_service_delete_token"
      end
      # resource path
      local_var_path = '/api/v1/account/{name}/token/{id}'.sub('{' + 'name' + '}', name.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountEmptyResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_delete_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # GetAccount returns an account
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [AccountAccount]
    def account_service_get_account(name, opts = {})
      data, _status_code, _headers = account_service_get_account_with_http_info(name, opts)
      data
    end

    # GetAccount returns an account
    # @param name 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAccount, Fixnum, Hash)>] AccountAccount data, response status code and response headers
    def account_service_get_account_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_get_account ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AccountServiceApi.account_service_get_account"
      end
      # resource path
      local_var_path = '/api/v1/account/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountAccount')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # ListAccounts returns the list of accounts
    # @param [Hash] opts the optional parameters
    # @return [AccountAccountsList]
    def account_service_list_accounts(opts = {})
      data, _status_code, _headers = account_service_list_accounts_with_http_info(opts)
      data
    end

    # ListAccounts returns the list of accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountAccountsList, Fixnum, Hash)>] AccountAccountsList data, response status code and response headers
    def account_service_list_accounts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_list_accounts ...'
      end
      # resource path
      local_var_path = '/api/v1/account'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountAccountsList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_list_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # UpdatePassword updates an account's password to a new value
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [AccountUpdatePasswordResponse]
    def account_service_update_password(body, opts = {})
      data, _status_code, _headers = account_service_update_password_with_http_info(body, opts)
      data
    end

    # UpdatePassword updates an account&#39;s password to a new value
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountUpdatePasswordResponse, Fixnum, Hash)>] AccountUpdatePasswordResponse data, response status code and response headers
    def account_service_update_password_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountServiceApi.account_service_update_password ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling AccountServiceApi.account_service_update_password"
      end
      # resource path
      local_var_path = '/api/v1/account/password'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['argocd_auth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccountUpdatePasswordResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountServiceApi#account_service_update_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
