=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'date'

module ArgoCD
  class V1alpha1AppProjectSpec
    attr_accessor :cluster_resource_blacklist

    attr_accessor :cluster_resource_whitelist

    attr_accessor :description

    attr_accessor :destinations

    attr_accessor :namespace_resource_blacklist

    attr_accessor :namespace_resource_whitelist

    attr_accessor :orphaned_resources

    attr_accessor :permit_only_project_scoped_clusters

    attr_accessor :roles

    attr_accessor :signature_keys

    attr_accessor :source_namespaces

    attr_accessor :source_repos

    attr_accessor :sync_windows

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cluster_resource_blacklist' => :'clusterResourceBlacklist',
        :'cluster_resource_whitelist' => :'clusterResourceWhitelist',
        :'description' => :'description',
        :'destinations' => :'destinations',
        :'namespace_resource_blacklist' => :'namespaceResourceBlacklist',
        :'namespace_resource_whitelist' => :'namespaceResourceWhitelist',
        :'orphaned_resources' => :'orphanedResources',
        :'permit_only_project_scoped_clusters' => :'permitOnlyProjectScopedClusters',
        :'roles' => :'roles',
        :'signature_keys' => :'signatureKeys',
        :'source_namespaces' => :'sourceNamespaces',
        :'source_repos' => :'sourceRepos',
        :'sync_windows' => :'syncWindows'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'cluster_resource_blacklist' => :'Array<V1GroupKind>',
        :'cluster_resource_whitelist' => :'Array<V1GroupKind>',
        :'description' => :'String',
        :'destinations' => :'Array<V1alpha1ApplicationDestination>',
        :'namespace_resource_blacklist' => :'Array<V1GroupKind>',
        :'namespace_resource_whitelist' => :'Array<V1GroupKind>',
        :'orphaned_resources' => :'V1alpha1OrphanedResourcesMonitorSettings',
        :'permit_only_project_scoped_clusters' => :'BOOLEAN',
        :'roles' => :'Array<V1alpha1ProjectRole>',
        :'signature_keys' => :'Array<V1alpha1SignatureKey>',
        :'source_namespaces' => :'Array<String>',
        :'source_repos' => :'Array<String>',
        :'sync_windows' => :'Array<V1alpha1SyncWindow>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'clusterResourceBlacklist')
        if (value = attributes[:'clusterResourceBlacklist']).is_a?(Array)
          self.cluster_resource_blacklist = value
        end
      end

      if attributes.has_key?(:'clusterResourceWhitelist')
        if (value = attributes[:'clusterResourceWhitelist']).is_a?(Array)
          self.cluster_resource_whitelist = value
        end
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'destinations')
        if (value = attributes[:'destinations']).is_a?(Array)
          self.destinations = value
        end
      end

      if attributes.has_key?(:'namespaceResourceBlacklist')
        if (value = attributes[:'namespaceResourceBlacklist']).is_a?(Array)
          self.namespace_resource_blacklist = value
        end
      end

      if attributes.has_key?(:'namespaceResourceWhitelist')
        if (value = attributes[:'namespaceResourceWhitelist']).is_a?(Array)
          self.namespace_resource_whitelist = value
        end
      end

      if attributes.has_key?(:'orphanedResources')
        self.orphaned_resources = attributes[:'orphanedResources']
      end

      if attributes.has_key?(:'permitOnlyProjectScopedClusters')
        self.permit_only_project_scoped_clusters = attributes[:'permitOnlyProjectScopedClusters']
      end

      if attributes.has_key?(:'roles')
        if (value = attributes[:'roles']).is_a?(Array)
          self.roles = value
        end
      end

      if attributes.has_key?(:'signatureKeys')
        if (value = attributes[:'signatureKeys']).is_a?(Array)
          self.signature_keys = value
        end
      end

      if attributes.has_key?(:'sourceNamespaces')
        if (value = attributes[:'sourceNamespaces']).is_a?(Array)
          self.source_namespaces = value
        end
      end

      if attributes.has_key?(:'sourceRepos')
        if (value = attributes[:'sourceRepos']).is_a?(Array)
          self.source_repos = value
        end
      end

      if attributes.has_key?(:'syncWindows')
        if (value = attributes[:'syncWindows']).is_a?(Array)
          self.sync_windows = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cluster_resource_blacklist == o.cluster_resource_blacklist &&
          cluster_resource_whitelist == o.cluster_resource_whitelist &&
          description == o.description &&
          destinations == o.destinations &&
          namespace_resource_blacklist == o.namespace_resource_blacklist &&
          namespace_resource_whitelist == o.namespace_resource_whitelist &&
          orphaned_resources == o.orphaned_resources &&
          permit_only_project_scoped_clusters == o.permit_only_project_scoped_clusters &&
          roles == o.roles &&
          signature_keys == o.signature_keys &&
          source_namespaces == o.source_namespaces &&
          source_repos == o.source_repos &&
          sync_windows == o.sync_windows
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cluster_resource_blacklist, cluster_resource_whitelist, description, destinations, namespace_resource_blacklist, namespace_resource_whitelist, orphaned_resources, permit_only_project_scoped_clusters, roles, signature_keys, source_namespaces, source_repos, sync_windows].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoCD.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
