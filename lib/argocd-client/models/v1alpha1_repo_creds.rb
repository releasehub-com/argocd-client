=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'date'

module ArgoCD
  class V1alpha1RepoCreds
    attr_accessor :enable_oci

    attr_accessor :force_http_basic_auth

    attr_accessor :gcp_service_account_key

    attr_accessor :github_app_enterprise_base_url

    attr_accessor :github_app_id

    attr_accessor :github_app_installation_id

    attr_accessor :github_app_private_key

    attr_accessor :password

    attr_accessor :proxy

    attr_accessor :ssh_private_key

    attr_accessor :tls_client_cert_data

    attr_accessor :tls_client_cert_key

    # Type specifies the type of the repoCreds. Can be either \"git\" or \"helm. \"git\" is assumed if empty or absent.
    attr_accessor :type

    attr_accessor :url

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'enable_oci' => :'enableOCI',
        :'force_http_basic_auth' => :'forceHttpBasicAuth',
        :'gcp_service_account_key' => :'gcpServiceAccountKey',
        :'github_app_enterprise_base_url' => :'githubAppEnterpriseBaseUrl',
        :'github_app_id' => :'githubAppID',
        :'github_app_installation_id' => :'githubAppInstallationID',
        :'github_app_private_key' => :'githubAppPrivateKey',
        :'password' => :'password',
        :'proxy' => :'proxy',
        :'ssh_private_key' => :'sshPrivateKey',
        :'tls_client_cert_data' => :'tlsClientCertData',
        :'tls_client_cert_key' => :'tlsClientCertKey',
        :'type' => :'type',
        :'url' => :'url',
        :'username' => :'username'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'enable_oci' => :'BOOLEAN',
        :'force_http_basic_auth' => :'BOOLEAN',
        :'gcp_service_account_key' => :'String',
        :'github_app_enterprise_base_url' => :'String',
        :'github_app_id' => :'String',
        :'github_app_installation_id' => :'String',
        :'github_app_private_key' => :'String',
        :'password' => :'String',
        :'proxy' => :'String',
        :'ssh_private_key' => :'String',
        :'tls_client_cert_data' => :'String',
        :'tls_client_cert_key' => :'String',
        :'type' => :'String',
        :'url' => :'String',
        :'username' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'enableOCI')
        self.enable_oci = attributes[:'enableOCI']
      end

      if attributes.has_key?(:'forceHttpBasicAuth')
        self.force_http_basic_auth = attributes[:'forceHttpBasicAuth']
      end

      if attributes.has_key?(:'gcpServiceAccountKey')
        self.gcp_service_account_key = attributes[:'gcpServiceAccountKey']
      end

      if attributes.has_key?(:'githubAppEnterpriseBaseUrl')
        self.github_app_enterprise_base_url = attributes[:'githubAppEnterpriseBaseUrl']
      end

      if attributes.has_key?(:'githubAppID')
        self.github_app_id = attributes[:'githubAppID']
      end

      if attributes.has_key?(:'githubAppInstallationID')
        self.github_app_installation_id = attributes[:'githubAppInstallationID']
      end

      if attributes.has_key?(:'githubAppPrivateKey')
        self.github_app_private_key = attributes[:'githubAppPrivateKey']
      end

      if attributes.has_key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.has_key?(:'proxy')
        self.proxy = attributes[:'proxy']
      end

      if attributes.has_key?(:'sshPrivateKey')
        self.ssh_private_key = attributes[:'sshPrivateKey']
      end

      if attributes.has_key?(:'tlsClientCertData')
        self.tls_client_cert_data = attributes[:'tlsClientCertData']
      end

      if attributes.has_key?(:'tlsClientCertKey')
        self.tls_client_cert_key = attributes[:'tlsClientCertKey']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          enable_oci == o.enable_oci &&
          force_http_basic_auth == o.force_http_basic_auth &&
          gcp_service_account_key == o.gcp_service_account_key &&
          github_app_enterprise_base_url == o.github_app_enterprise_base_url &&
          github_app_id == o.github_app_id &&
          github_app_installation_id == o.github_app_installation_id &&
          github_app_private_key == o.github_app_private_key &&
          password == o.password &&
          proxy == o.proxy &&
          ssh_private_key == o.ssh_private_key &&
          tls_client_cert_data == o.tls_client_cert_data &&
          tls_client_cert_key == o.tls_client_cert_key &&
          type == o.type &&
          url == o.url &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [enable_oci, force_http_basic_auth, gcp_service_account_key, github_app_enterprise_base_url, github_app_id, github_app_installation_id, github_app_private_key, password, proxy, ssh_private_key, tls_client_cert_data, tls_client_cert_key, type, url, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoCD.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
