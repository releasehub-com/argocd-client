=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'date'

module ArgoCD
  # ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
  class V1ObjectMeta
    attr_accessor :annotations

    # Deprecated: ClusterName is a legacy field that was always cleared by the system and never used; it will be removed completely in 1.25.  The name in the go struct is changed to help clients detect accidental use.  +optional
    attr_accessor :cluster_name

    attr_accessor :creation_timestamp

    attr_accessor :deletion_grace_period_seconds

    attr_accessor :deletion_timestamp

    attr_accessor :finalizers

    # GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.  If this field is specified and the generated name exists, the server will return a 409.  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency +optional
    attr_accessor :generate_name

    attr_accessor :generation

    attr_accessor :labels

    # ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.  +optional
    attr_accessor :managed_fields

    attr_accessor :name

    # Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces +optional
    attr_accessor :namespace

    attr_accessor :owner_references

    # An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency +optional
    attr_accessor :resource_version

    attr_accessor :self_link

    # UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids +optional
    attr_accessor :uid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'annotations' => :'annotations',
        :'cluster_name' => :'clusterName',
        :'creation_timestamp' => :'creationTimestamp',
        :'deletion_grace_period_seconds' => :'deletionGracePeriodSeconds',
        :'deletion_timestamp' => :'deletionTimestamp',
        :'finalizers' => :'finalizers',
        :'generate_name' => :'generateName',
        :'generation' => :'generation',
        :'labels' => :'labels',
        :'managed_fields' => :'managedFields',
        :'name' => :'name',
        :'namespace' => :'namespace',
        :'owner_references' => :'ownerReferences',
        :'resource_version' => :'resourceVersion',
        :'self_link' => :'selfLink',
        :'uid' => :'uid'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'annotations' => :'Hash<String, String>',
        :'cluster_name' => :'String',
        :'creation_timestamp' => :'V1Time',
        :'deletion_grace_period_seconds' => :'String',
        :'deletion_timestamp' => :'V1Time',
        :'finalizers' => :'Array<String>',
        :'generate_name' => :'String',
        :'generation' => :'String',
        :'labels' => :'Hash<String, String>',
        :'managed_fields' => :'Array<V1ManagedFieldsEntry>',
        :'name' => :'String',
        :'namespace' => :'String',
        :'owner_references' => :'Array<V1OwnerReference>',
        :'resource_version' => :'String',
        :'self_link' => :'String',
        :'uid' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'annotations')
        if (value = attributes[:'annotations']).is_a?(Hash)
          self.annotations = value
        end
      end

      if attributes.has_key?(:'clusterName')
        self.cluster_name = attributes[:'clusterName']
      end

      if attributes.has_key?(:'creationTimestamp')
        self.creation_timestamp = attributes[:'creationTimestamp']
      end

      if attributes.has_key?(:'deletionGracePeriodSeconds')
        self.deletion_grace_period_seconds = attributes[:'deletionGracePeriodSeconds']
      end

      if attributes.has_key?(:'deletionTimestamp')
        self.deletion_timestamp = attributes[:'deletionTimestamp']
      end

      if attributes.has_key?(:'finalizers')
        if (value = attributes[:'finalizers']).is_a?(Array)
          self.finalizers = value
        end
      end

      if attributes.has_key?(:'generateName')
        self.generate_name = attributes[:'generateName']
      end

      if attributes.has_key?(:'generation')
        self.generation = attributes[:'generation']
      end

      if attributes.has_key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Hash)
          self.labels = value
        end
      end

      if attributes.has_key?(:'managedFields')
        if (value = attributes[:'managedFields']).is_a?(Array)
          self.managed_fields = value
        end
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'namespace')
        self.namespace = attributes[:'namespace']
      end

      if attributes.has_key?(:'ownerReferences')
        if (value = attributes[:'ownerReferences']).is_a?(Array)
          self.owner_references = value
        end
      end

      if attributes.has_key?(:'resourceVersion')
        self.resource_version = attributes[:'resourceVersion']
      end

      if attributes.has_key?(:'selfLink')
        self.self_link = attributes[:'selfLink']
      end

      if attributes.has_key?(:'uid')
        self.uid = attributes[:'uid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          annotations == o.annotations &&
          cluster_name == o.cluster_name &&
          creation_timestamp == o.creation_timestamp &&
          deletion_grace_period_seconds == o.deletion_grace_period_seconds &&
          deletion_timestamp == o.deletion_timestamp &&
          finalizers == o.finalizers &&
          generate_name == o.generate_name &&
          generation == o.generation &&
          labels == o.labels &&
          managed_fields == o.managed_fields &&
          name == o.name &&
          namespace == o.namespace &&
          owner_references == o.owner_references &&
          resource_version == o.resource_version &&
          self_link == o.self_link &&
          uid == o.uid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [annotations, cluster_name, creation_timestamp, deletion_grace_period_seconds, deletion_timestamp, finalizers, generate_name, generation, labels, managed_fields, name, namespace, owner_references, resource_version, self_link, uid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoCD.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
