=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'date'

module ArgoCD
  class V1alpha1ApplicationSourceHelm
    attr_accessor :file_parameters

    attr_accessor :ignore_missing_value_files

    attr_accessor :parameters

    attr_accessor :pass_credentials

    attr_accessor :release_name

    attr_accessor :skip_crds

    attr_accessor :value_files

    attr_accessor :values

    attr_accessor :version

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'file_parameters' => :'fileParameters',
        :'ignore_missing_value_files' => :'ignoreMissingValueFiles',
        :'parameters' => :'parameters',
        :'pass_credentials' => :'passCredentials',
        :'release_name' => :'releaseName',
        :'skip_crds' => :'skipCrds',
        :'value_files' => :'valueFiles',
        :'values' => :'values',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'file_parameters' => :'Array<V1alpha1HelmFileParameter>',
        :'ignore_missing_value_files' => :'BOOLEAN',
        :'parameters' => :'Array<V1alpha1HelmParameter>',
        :'pass_credentials' => :'BOOLEAN',
        :'release_name' => :'String',
        :'skip_crds' => :'BOOLEAN',
        :'value_files' => :'Array<String>',
        :'values' => :'String',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'fileParameters')
        if (value = attributes[:'fileParameters']).is_a?(Array)
          self.file_parameters = value
        end
      end

      if attributes.has_key?(:'ignoreMissingValueFiles')
        self.ignore_missing_value_files = attributes[:'ignoreMissingValueFiles']
      end

      if attributes.has_key?(:'parameters')
        if (value = attributes[:'parameters']).is_a?(Array)
          self.parameters = value
        end
      end

      if attributes.has_key?(:'passCredentials')
        self.pass_credentials = attributes[:'passCredentials']
      end

      if attributes.has_key?(:'releaseName')
        self.release_name = attributes[:'releaseName']
      end

      if attributes.has_key?(:'skipCrds')
        self.skip_crds = attributes[:'skipCrds']
      end

      if attributes.has_key?(:'valueFiles')
        if (value = attributes[:'valueFiles']).is_a?(Array)
          self.value_files = value
        end
      end

      if attributes.has_key?(:'values')
        self.values = attributes[:'values']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          file_parameters == o.file_parameters &&
          ignore_missing_value_files == o.ignore_missing_value_files &&
          parameters == o.parameters &&
          pass_credentials == o.pass_credentials &&
          release_name == o.release_name &&
          skip_crds == o.skip_crds &&
          value_files == o.value_files &&
          values == o.values &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [file_parameters, ignore_missing_value_files, parameters, pass_credentials, release_name, skip_crds, value_files, values, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoCD.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
