=begin
#Consolidate Services

#Description of all APIs

OpenAPI spec version: version not set

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.32-SNAPSHOT

=end

require 'date'

module ArgoCD
  class ClusterSettings
    attr_accessor :app_label_key

    attr_accessor :apps_in_any_namespace_enabled

    attr_accessor :config_management_plugins

    attr_accessor :controller_namespace

    attr_accessor :dex_config

    attr_accessor :exec_enabled

    attr_accessor :google_analytics

    attr_accessor :help

    attr_accessor :kustomize_options

    attr_accessor :kustomize_versions

    attr_accessor :oidc_config

    attr_accessor :password_pattern

    attr_accessor :plugins

    attr_accessor :resource_overrides

    attr_accessor :status_badge_enabled

    attr_accessor :status_badge_root_url

    attr_accessor :tracking_method

    attr_accessor :ui_banner_content

    attr_accessor :ui_banner_permanent

    attr_accessor :ui_banner_position

    attr_accessor :ui_banner_url

    attr_accessor :ui_css_url

    attr_accessor :url

    attr_accessor :user_logins_disabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'app_label_key' => :'appLabelKey',
        :'apps_in_any_namespace_enabled' => :'appsInAnyNamespaceEnabled',
        :'config_management_plugins' => :'configManagementPlugins',
        :'controller_namespace' => :'controllerNamespace',
        :'dex_config' => :'dexConfig',
        :'exec_enabled' => :'execEnabled',
        :'google_analytics' => :'googleAnalytics',
        :'help' => :'help',
        :'kustomize_options' => :'kustomizeOptions',
        :'kustomize_versions' => :'kustomizeVersions',
        :'oidc_config' => :'oidcConfig',
        :'password_pattern' => :'passwordPattern',
        :'plugins' => :'plugins',
        :'resource_overrides' => :'resourceOverrides',
        :'status_badge_enabled' => :'statusBadgeEnabled',
        :'status_badge_root_url' => :'statusBadgeRootUrl',
        :'tracking_method' => :'trackingMethod',
        :'ui_banner_content' => :'uiBannerContent',
        :'ui_banner_permanent' => :'uiBannerPermanent',
        :'ui_banner_position' => :'uiBannerPosition',
        :'ui_banner_url' => :'uiBannerURL',
        :'ui_css_url' => :'uiCssURL',
        :'url' => :'url',
        :'user_logins_disabled' => :'userLoginsDisabled'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'app_label_key' => :'String',
        :'apps_in_any_namespace_enabled' => :'BOOLEAN',
        :'config_management_plugins' => :'Array<V1alpha1ConfigManagementPlugin>',
        :'controller_namespace' => :'String',
        :'dex_config' => :'ClusterDexConfig',
        :'exec_enabled' => :'BOOLEAN',
        :'google_analytics' => :'ClusterGoogleAnalyticsConfig',
        :'help' => :'ClusterHelp',
        :'kustomize_options' => :'V1alpha1KustomizeOptions',
        :'kustomize_versions' => :'Array<String>',
        :'oidc_config' => :'ClusterOIDCConfig',
        :'password_pattern' => :'String',
        :'plugins' => :'Array<ClusterPlugin>',
        :'resource_overrides' => :'Hash<String, V1alpha1ResourceOverride>',
        :'status_badge_enabled' => :'BOOLEAN',
        :'status_badge_root_url' => :'String',
        :'tracking_method' => :'String',
        :'ui_banner_content' => :'String',
        :'ui_banner_permanent' => :'BOOLEAN',
        :'ui_banner_position' => :'String',
        :'ui_banner_url' => :'String',
        :'ui_css_url' => :'String',
        :'url' => :'String',
        :'user_logins_disabled' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'appLabelKey')
        self.app_label_key = attributes[:'appLabelKey']
      end

      if attributes.has_key?(:'appsInAnyNamespaceEnabled')
        self.apps_in_any_namespace_enabled = attributes[:'appsInAnyNamespaceEnabled']
      end

      if attributes.has_key?(:'configManagementPlugins')
        if (value = attributes[:'configManagementPlugins']).is_a?(Array)
          self.config_management_plugins = value
        end
      end

      if attributes.has_key?(:'controllerNamespace')
        self.controller_namespace = attributes[:'controllerNamespace']
      end

      if attributes.has_key?(:'dexConfig')
        self.dex_config = attributes[:'dexConfig']
      end

      if attributes.has_key?(:'execEnabled')
        self.exec_enabled = attributes[:'execEnabled']
      end

      if attributes.has_key?(:'googleAnalytics')
        self.google_analytics = attributes[:'googleAnalytics']
      end

      if attributes.has_key?(:'help')
        self.help = attributes[:'help']
      end

      if attributes.has_key?(:'kustomizeOptions')
        self.kustomize_options = attributes[:'kustomizeOptions']
      end

      if attributes.has_key?(:'kustomizeVersions')
        if (value = attributes[:'kustomizeVersions']).is_a?(Array)
          self.kustomize_versions = value
        end
      end

      if attributes.has_key?(:'oidcConfig')
        self.oidc_config = attributes[:'oidcConfig']
      end

      if attributes.has_key?(:'passwordPattern')
        self.password_pattern = attributes[:'passwordPattern']
      end

      if attributes.has_key?(:'plugins')
        if (value = attributes[:'plugins']).is_a?(Array)
          self.plugins = value
        end
      end

      if attributes.has_key?(:'resourceOverrides')
        if (value = attributes[:'resourceOverrides']).is_a?(Hash)
          self.resource_overrides = value
        end
      end

      if attributes.has_key?(:'statusBadgeEnabled')
        self.status_badge_enabled = attributes[:'statusBadgeEnabled']
      end

      if attributes.has_key?(:'statusBadgeRootUrl')
        self.status_badge_root_url = attributes[:'statusBadgeRootUrl']
      end

      if attributes.has_key?(:'trackingMethod')
        self.tracking_method = attributes[:'trackingMethod']
      end

      if attributes.has_key?(:'uiBannerContent')
        self.ui_banner_content = attributes[:'uiBannerContent']
      end

      if attributes.has_key?(:'uiBannerPermanent')
        self.ui_banner_permanent = attributes[:'uiBannerPermanent']
      end

      if attributes.has_key?(:'uiBannerPosition')
        self.ui_banner_position = attributes[:'uiBannerPosition']
      end

      if attributes.has_key?(:'uiBannerURL')
        self.ui_banner_url = attributes[:'uiBannerURL']
      end

      if attributes.has_key?(:'uiCssURL')
        self.ui_css_url = attributes[:'uiCssURL']
      end

      if attributes.has_key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.has_key?(:'userLoginsDisabled')
        self.user_logins_disabled = attributes[:'userLoginsDisabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          app_label_key == o.app_label_key &&
          apps_in_any_namespace_enabled == o.apps_in_any_namespace_enabled &&
          config_management_plugins == o.config_management_plugins &&
          controller_namespace == o.controller_namespace &&
          dex_config == o.dex_config &&
          exec_enabled == o.exec_enabled &&
          google_analytics == o.google_analytics &&
          help == o.help &&
          kustomize_options == o.kustomize_options &&
          kustomize_versions == o.kustomize_versions &&
          oidc_config == o.oidc_config &&
          password_pattern == o.password_pattern &&
          plugins == o.plugins &&
          resource_overrides == o.resource_overrides &&
          status_badge_enabled == o.status_badge_enabled &&
          status_badge_root_url == o.status_badge_root_url &&
          tracking_method == o.tracking_method &&
          ui_banner_content == o.ui_banner_content &&
          ui_banner_permanent == o.ui_banner_permanent &&
          ui_banner_position == o.ui_banner_position &&
          ui_banner_url == o.ui_banner_url &&
          ui_css_url == o.ui_css_url &&
          url == o.url &&
          user_logins_disabled == o.user_logins_disabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [app_label_key, apps_in_any_namespace_enabled, config_management_plugins, controller_namespace, dex_config, exec_enabled, google_analytics, help, kustomize_options, kustomize_versions, oidc_config, password_pattern, plugins, resource_overrides, status_badge_enabled, status_badge_root_url, tracking_method, ui_banner_content, ui_banner_permanent, ui_banner_position, ui_banner_url, ui_css_url, url, user_logins_disabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ArgoCD.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
